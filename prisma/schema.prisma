// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  transactions Transaction[]
  histories History[]

  @@map("users")
}

model Account {
  id           Int       @id @default(autoincrement())
  userId       Int     
  type         String
  total        Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("accounts")
}

model Transaction {
  id          Int       @id @default(autoincrement())
  userId      Int
  accountId   Int
  toAddress   String
  amount      Decimal
  currency    String
  status      RequestStatus @default(APPROVED)
  timestamp   DateTime @default(now())
  user        User       @relation(fields: [userId], references: [id])
  account     Account    @relation(fields: [accountId], references: [id])
  histories   History[]     

  @@map("transactions")
}

model History {
  id            Int       @id @default(autoincrement())
  userId        Int?
  transactionId Int?
  timestamp     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  @@map("histories")
}

enum Type {
  CREDIT
  DEBIT
  LOAN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}